{"version":3,"file":"static/js/73.288e9533.chunk.js","mappings":"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","sources":["webpack://filmoteka/./src/components/MovieDetails/MovieDetails.module.css?9ca9","components/MovieDetails/MovieDetails.jsx","pages/MoviesDetailsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"movie_item\":\"MovieDetails_movie_item__a4W62\",\"movie_descr\":\"MovieDetails_movie_descr__oHUzE\",\"movie_title\":\"MovieDetails_movie_title__dhyNq\",\"movie_score\":\"MovieDetails_movie_score__rYR6Q\",\"movie_details\":\"MovieDetails_movie_details__AvFFx\",\"movie_back_link\":\"MovieDetails_movie_back_link__oiHoH\",\"details__list\":\"MovieDetails_details__list__34gD0\",\"details__link\":\"MovieDetails_details__link__I3r4J\"};","import clsx from 'clsx';\nimport { Link, NavLink } from 'react-router-dom';\nimport { TiArrowBackOutline } from 'react-icons/ti';\nimport PropTypes from 'prop-types';\n\nimport styled from './MovieDetails.module.css';\n\nconst MovieDetails = ({ data, backLinkHref }) => {\n  const { title, poster_path, vote_average, overview, genres } = data;\n  const votes = String(Math.round(vote_average * 10));\n  return (\n    <>\n      <Link className={clsx(styled.movie_back_link)} to={backLinkHref}>\n        <TiArrowBackOutline fontSize={'36px'} />\n        Go back\n      </Link>\n      {Boolean(data) && (\n        <div className={clsx(styled.movie_item)}>\n          <img\n            src={poster_path && `https://image.tmdb.org/t/p/w500${poster_path}`}\n            alt={title && title}\n            className=\"movie_poster\"\n          />\n          <div className={clsx(styled.movie_descr)}>\n            <h2 className={clsx(styled.movie_title)}>{title}</h2>\n            <p className={clsx(styled.movie_score)}>\n              Positive votes: <span>{votes}%</span>\n            </p>\n            <div className={clsx(styled.movie_details)}>\n              <h3>Overview</h3>\n              <p>{overview}</p>\n            </div>\n            <div className={clsx(styled.movie_details)}>\n              <h3>Genres</h3>\n              <p className=\"movie_genres\">\n                {genres?.map(({ name }, index) => (\n                  <a key={index} href=\"_\" className=\"movie_genre\">\n                    {name}\n                  </a>\n                ))}\n              </p>\n            </div>\n          </div>\n        </div>\n      )}\n      <ul className={clsx(styled.details__list)}>\n        <li className={clsx(styled.details__item)}>\n          <NavLink\n            className={clsx(styled.details__link)}\n            to=\"cast\"\n            state={{ from: backLinkHref }}\n          >\n            Cast\n          </NavLink>\n        </li>\n        <li className={clsx(styled.details__item)}>\n          <NavLink\n            className={clsx(styled.details__link)}\n            to=\"reviews\"\n            state={{ from: backLinkHref }}\n          >\n            Reviews\n          </NavLink>\n        </li>\n      </ul>\n    </>\n  );\n};\n\nexport default MovieDetails;\nMovieDetails.propTypes = {\n  data: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    poster_path: PropTypes.string.isRequired,\n    vote_average: PropTypes.number.isRequired,\n    overview: PropTypes.string.isRequired,\n    genres: PropTypes.array.isRequired,\n  }),\n  backLinkHref: PropTypes.object.isRequired,\n};\n","import { Suspense, lazy, useEffect } from 'react';\nimport { Route, Routes, useLocation, useParams } from 'react-router-dom';\n\nimport Loader from 'components/Loader/Loader';\nimport MovieDetails from 'components/MovieDetails/MovieDetails';\nimport ErrorPage from './ErrorPage/ErrorPage';\n\nimport { useData } from 'js/useData/useData';\nimport MovieAPI from 'js/API_requests/MoviesAPI';\nimport { LocationProvider } from 'js/utils/LocationProvider/LocationProvider';\n\nconst Cast = lazy(() => import('components/Cast/Cast'));\nconst Reviews = lazy(() => import('components/Reviews/Reviews'));\n\nconst RoutesWithAnimation = () => {\n  const location = useLocation();\n\n  return (\n    <Suspense fallback={<Loader />}>\n      <Routes key={location.key}>\n        <Route path=\"cast\" element={<Cast />} />\n        <Route path=\"reviews\" element={<Reviews />} />\n      </Routes>\n    </Suspense>\n  );\n};\n\nconst MoviesDetailsPage = () => {\n  const { movieId } = useParams();\n  const location = useLocation();\n\n  const { data: moviesList, isFetching, error, getData } = useData();\n  const backLinkHref = location.state?.from ?? '/movies';\n\n  useEffect(() => {\n    if (!movieId) return;\n    getData(MovieAPI.getSingleMovie(movieId));\n  }, [getData, movieId]);\n\n  if (error?.message) {\n    return <ErrorPage />;\n  }\n\n  return (\n    <section>\n      <div className=\"container\">\n        {isFetching && <Loader />}\n        {moviesList && (\n          <MovieDetails data={moviesList} backLinkHref={backLinkHref} />\n        )}\n        <LocationProvider>\n          <RoutesWithAnimation />\n        </LocationProvider>\n      </div>\n    </section>\n  );\n};\n\nexport default MoviesDetailsPage;\n"],"names":["_ref","data","backLinkHref","title","poster_path","vote_average","overview","genres","votes","String","Math","round","_jsxs","_Fragment","children","Link","className","clsx","styled","to","_jsx","TiArrowBackOutline","fontSize","Boolean","src","concat","alt","map","_ref2","index","name","href","NavLink","state","from","Cast","lazy","Reviews","RoutesWithAnimation","location","useLocation","Suspense","fallback","Loader","Routes","Route","path","element","key","_location$state$from","_location$state","movieId","useParams","_useData","useData","moviesList","isFetching","error","getData","useEffect","MovieAPI","message","ErrorPage","MovieDetails","LocationProvider"],"sourceRoot":""}